[build-system]
requires = ["setuptools >= 40.9.0"]
build-backend = "setuptools.build_meta"

[project]
name = "discord-ext-flow"
dynamic = ["version"]
description = ''
readme = "README.md"
requires-python = ">=3.11"
license = { file = "LICENSE" }
keywords = []
authors = [
    { name = "hawk-tomy", email = "67221751+hawk-tomy@users.noreply.github.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Natural Language :: Japanese",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = [
    "discord.py~=2.0",
    # .
]

[project.optional-dependencies]
dev = [
    "pyright>=1.1.310",
    "mypy>=1.5.0,!=1.6.0,!=1.6.1",
    "ruff>=0.1.2",
    # .
]

[project.urls]
Source = "https://github.com/keizaiya/discord-ext-flow"

[tool.pyright]
typeCheckingMode = "strict"

reportGeneralTypeIssues = "warning"
reportImportCycles = "warning"

useLibraryCodeForTypes = true
strictListInference = true
strictDictionaryInference = true

reportFunctionMemberAccess = false
reportIncompatibleMethodOverride = false
reportPrivateUsage = false
reportUnusedImport = false
reportUnnecessaryIsInstance = false

[tool.mypy]
mypy_path = "$MYPY_CONFIG_FILE_DIR/typings"
files = "**/*.py,**/*.pyi"
enable_incomplete_feature = ["Unpack"]
plugins = ["sqlalchemy.ext.mypy.plugin"]

allow_redefinition = true
check_untyped_defs = true
warn_redundant_casts = true
show_error_context = true
show_column_numbers = true

warn_unused_ignores = false
warn_no_return = false

[tool.ruff]
target-version = "py37"
line-length = 120
exclude = ["venv", ".venv"]
fix = true
select = [
    "A",
    "ARG",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
    "RET501",
    "RET502",
    "RET504",
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    "F403",
    "F405",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105",
    "S106",
    "S107",
    # Ignore complexity
    "C901",
    "PLR0911",
    "PLR0912",
    "PLR0913",
    "PLR0915",
]
fixable = [
    "F401",
    "RET502",
    # .
]

[tool.ruff.per-file-ignores]
"*.pyi" = ["E701"]

[tool.ruff.flake8-quotes]
inline-quotes = "single"

[tool.ruff.isort]
known-first-party = ["discord"]
required-imports = ["from __future__ import annotations"]
combine-as-imports = true
